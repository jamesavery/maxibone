#include <inttypes.h>
#include <math.h>
#include <stdio.h>
 
void execute(uint64_t       *restrict bins,
	     %(voxel_type)s *voxels,
	     %(field_type)s *field)
{
  const uint64_t image_length = %(image_length)d, field_bins = %(field_bins)d, voxel_bins = %(voxel_bins)d;
  const double vmin = %(vmin)f, vmax = %(vmax)f, fmin = %(fmin)f, fmax = %(fmax)f;
  
  for(int i=0;i< field_bins*voxel_bins;i++) bins[i] = 0;

  uint64_t i;

  fprintf(stderr,"Histogramming %%ld elements\n",image_length);
  
#pragma omp parallel for private(i) reduction(+:bins[:field_bins*voxel_bins])  
  for(i=0;i< image_length;i++){

    uint64_t field_index = floor((field_bins-1) * (field[i]  - (fmin))/(fmax - (fmin)) );
    uint64_t voxel_index = floor((voxel_bins-1) * (voxels[i] - (vmin))/(vmax - (vmin)) );
    uint64_t index = field_index * voxel_bins + voxel_index;

    if(index >= field_bins*voxel_bins){
      fprintf(stderr,"Index %%ld / %%ld = %%ld*%%ld+%%ld out of bound (%%ld>= %%ld)\n", i, index,field_index,voxel_bins,voxel_index, index, field_index*voxel_bins);
      fprintf(stderr,"vmin = %%f, vmax = %%f\n",vmin,vmax);
    } else
      bins[index]++;
  }
}
		     
